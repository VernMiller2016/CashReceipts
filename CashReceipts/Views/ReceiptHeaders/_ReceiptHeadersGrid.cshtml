@model int

<style type="text/css">
    .k-widget.k-window .k-edit-form-container input.k-textbox {
        width: 407px !important;
    }

    .k-animation-container {
        width: 400px !important;
    }

        .k-animation-container .k-list-container {
            width: 400px !important;
        }

    .k-edit-form-container .k-dropdown-wrap.k-state-default {
        width: 380px !important;
    }

    .k-widget.k-window .k-widget.k-numerictextbox {
        width: 407px !important;
    }

    .k-widget.k-window .k-edit-form-container {
        position: relative;
        width: 630px;
    }

    /*.receiptsBodyGrid .k-grid-content tbody tr td:first-child {
        text-align: right;
    }*/
    .k-edit-form-container .k-edit-field {
        margin-right: 10.5%;
    }

    .k-numerictextbox.k-input {
        float: right;
        width: 56% !important;
        margin-right: 6%;
    }

    .k-edit-form-container .editor-label, .k-edit-label {
        float: left;
        clear: both;
        width: 20%;
        padding: .4em 0 1em;
        margin-left: 2%;
        text-align: right;
    }

    .btn-destroy span {
        display: inline-block;
        width: 16px;
        height: 16px;
        overflow: hidden;
        background-repeat: no-repeat;
        font-size: 0;
        line-height: 0;
        text-align: center;
        margin-right: 3px;
        margin-right: .3rem;
        margin-left: -3px;
        margin-left: -.3rem;
        vertical-align: middle;
        background-image: url(/Scripts/KendoUI2016.2.504/styles/Bootstrap/sprite.png);
        border-color: transparent;
        background-position: -32px -16px;
    }
</style>

<div id="receipts" class="">
    <div class="">
        <div class="title-section">
            <h4>Receipts</h4>
            <hr />
        </div>
        <div class="MainDivToScroll MainDiv">
            <div class="k-content my-k-content">
                <div id="headersGrid"></div>
            </div>
        </div>
    </div>
</div>

<script type="text/x-kendo-template" id="template">
    <div class="tabstrip">
        <ul>
            <li class="k-state-active">
                Receipt Body
            </li>
            <li>
                Tenders
            </li>
        </ul>
        <div>
            <div class="receiptsBodyGrid"></div>
        </div>
        <div>
            <div class="tendersGrid"></div>
        </div>
    </div>
</script>

<script id="receiptBodyEditTemplate" type="text/x-kendo-template">
    <div class="k-edit-form-container">
        <div class="k-edit-label"><label for="LineTotal">Line Total</label></div>
        <input type="text" name="LineTotal" required="required" data-type="number" data-bind="value:LineTotal"
               data-role="numerictextbox" role="spinbutton" class="k-input k-total" aria-disabled="false" aria-readonly="false">

        <div class="k-edit-label"><label for="DepartmentID">Department</label></div>
        <input name="DepartmentID"
               data-value-field="DepartmentID"
               data-text-field="Description"
               data-source="departmentDataSource"
               data-role="dropdownlist"
               data-type="number" style="float: right;clear: right;width: 60%;margin-right: 10.5%;padding: 0 0 .6em;" />

        <div class="k-edit-label"><label for="TemplateID">Template</label></div>
        <input name="TemplateID"
               data-bind="value:TemplateID"
               data-value-field="TemplateID"
               data-text-field="Description"
               data-source="templatesDataSource"
               data-role="dropdownlist"
               data-type="number" style="float: right;clear: right;width: 60%;margin-right: 10.5%;padding: 0 0 .6em;" />

    </div>
</script>

<script>
    var selectedRows = undefined,
        currentGrid = null,
        clerksList,
        departmentsList,
        receiptsBodyDataSource,
        receiptsTendersDataSource,
        headersDataSources,
        receiptBodyDiv,
        templatesList,
        accountsList,
        paymentMethods,
        templatesDataSource,
        departmentDataSource,
        templatesReadUrl = '@Url.Action("Templates_Read", "ReceiptHeaders")?departmentId=';

    $(document).ready(function () {
        $.when(
                $.getJSON('@Url.Action("GetClerksList", "ReceiptHeaders")'),
                $.getJSON('@Url.Action("GetDepartmentsList", "ReceiptHeaders")')
            )
            .done(function (result1, result2) {
                if (result1[1] == "success") clerksList = result1[0];
                if (result2[1] == "success") departmentsList = result2[0];
                receiptsHeaderGridInit();
            });
    });

    var receiptsHeaderGridInit = function () {

        departmentDataSource = new kendo.data.DataSource({
            transport: {
                read: {
                    url: '@Url.Action("Departments_Read", "ReceiptHeaders")',
                    dataType: "json"
                }
            },
            serverPaging: false,
            schema: {
                data: "Data",
                total: "Total",
                model: {
                    id: "value",
                    fields: {
                        text: { type: "string" },
                        value: { type: "number" }
                    }
                },
                errors: "Errors"
            },
            change: function (e) {
            },
            error: function (e) {
                this.cancelChanges();
            }
        });

        headersDataSources = new kendo.data.DataSource({
            transport: {
                read: {
                    url: '@Url.Action("ReceiptHeaders_Read", "ReceiptHeaders")',
                    dataType: "json"
                },
                update: {
                    url: '@Url.Action("ReceiptHeaders_Update", "ReceiptHeaders")',
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    type: "POST"
                },
                destroy: {
                    url: '@Url.Action("ReceiptHeaders_Destroy", "ReceiptHeaders")',
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    type: "POST"
                },
                create: {
                    url: '@Url.Action("ReceiptHeaders_Create", "ReceiptHeaders")',
                    dataType: "json",
                    contentType: "application/json; charset=utf-8",
                    type: "POST"
                },
                parameterMap: function (options, operation) {
                    if (operation !== "read" && options.models) {
                        return JSON.stringify({ receiptHeaders: options.models });
                    }
                    //return JSON.stringify(options.models);
                }
            },
            batch: true,
            pageSize: 10,
            serverPaging: false,
            sort: [{ field: "ReceiptNumber", dir: "desc" }],
            schema: {
                data: "Data",
                total: "Total",
                model: {
                    id: "ReceiptHeaderID",
                    fields: {
                        ReceiptHeaderID: { editable: false, nullable: false, defaultValue: 0 },
                        DepartmentID: {
                            validation: {
                                required: true
                            },
                            type: "number"
                        },
                        ReceiptNumber: {
                            validation: {
                                required: true
                            },
                            type: "number",
                            defaultValue: getNextReceiptNumber()
                        },
                        ReceiptDate: {
                            validation: {
                                required: true
                            },
                            type: "date"
                        },
                        ReceiptTotal: {
                            validation: {
                                required: true
                            },
                            type: "number"
                        },
                        ClerkID: {
                            validation: {
                                required: true
                            },
                            type: "number"
                        },
                        Comments: {
                            type: "string"
                        }
                    }
                },
                errors: "Errors"
            },
            error: function (e) {
                if (e.errors && e.errors["_addKey"]) {
                    notify.showError(e.errors["_addKey"].errors[0]);
                }
                else if (e.errors && e.errors["_deleteKey"]) {
                    notify.showError(e.errors["_deleteKey"].errors[0]);
                }
                else if (e.errors && e.errors["_updateKey"]) {
                    notify.showError(e.errors["_updateKey"].errors[0]);
                }
                else {
                    notify.showError('An error has been occurred, please contact system admin.');
                }
                this.cancelChanges();
            }
        });

        $("#headersGrid").kendoGrid({
            dataSource: headersDataSources,
            //width: 600,
            selectable: "row",
            resizable: true,
            scrollable: true,
            sortable: true,
            filterable: true,
            groupable: true,
            reorderable: true,
            columnMenu: true,
            pageable: {
                refresh: true,
                input: true,
                numeric: false,
                pageSizes: [10, 20, 30, 50, 75, 100]
            },
            detailTemplate: kendo.template($("#template").html()),
            detailInit: receiptHeaderDetailInit,
            columns: [
                {
                    field: "ReceiptNumber",
                    title: "Receipt Number",
                    format: "{0}",
                    width: 100
                }, {
                    field: "ReceiptDate",
                    title: "Receipt Date",
                    format: "{0:MM/dd/yyyy}",
                    width: 90
                }, {
                    field: "ReceiptTotal",
                    title: "Receipt Total",
                    editor: oldNumericBoxEditor,
                    format: "{0:n2}",
                    width: 90
                },
                {
                    field: "DepartmentID",
                    title: "Department",
                    editor: departmentsDropDownEditor,
                    values: departmentsList,
                    width: 100
                },
                {
                    field: "ClerkID",
                    title: "Clerk",
                    values: clerksList,
                    width: 100
                },
                {
                    field: "Comments",
                    title: "Comments",
                    width: 100
                },
                { command: ["edit", "destroy"], title: "&nbsp;", width: "90px" }
            ],
            editable: "inline",
            toolbar: ["create",
                        {
                            text: "",
                            template: "<a class='k-button k-grid-PrintReceipt'><span class='k-icon k-i-pdf'></span>Download Receipt</a>"
                        },
                        {
                            text: "",
                            template: "<a class='k-button k-grid-PostCheck'><span class='k-icon k-i-group'></span>Post</a>"
                        }],
            dataBound: function (e) {
                //debugger;
                if (!currentGrid) {
                    currentGrid = $("#headersGrid").data("kendoGrid");
                    this.expandRow(this.tbody.find("tr.k-master-row").first());
                }
                enableDisableReceiptHeadersButtons(false);
            },
            edit: function (e) {
                //debugger;
                var editRow = e.container;
                if (e.model.isNew()) {
                    var receipts = this.dataSource.data();
                    var lastReceiptId = Math.max.apply(Math, $(receipts).map(function (i, r) { if (r.ReceiptNumber !== getNextReceiptNumber()) return r.ReceiptNumber; }));
                    e.model.set("ReceiptNumber", (lastReceiptId + 1));
                    e.model.ReceiptNumber = (lastReceiptId + 1);
                    //var ds = e.sender.dataSource;
                    //ds.sort(ds.sort());
                }
                editRow.find('td:eq(1) span.k-numeric-wrap span:first').remove();
                editRow.find('td:eq(1) span.k-numeric-wrap').css('padding', '0');
                editRow.find('td:eq(1) :input').attr('readonly', 'readonly');
            },
            change: function (e) {
                debugger;
                //selectedRows = this.select();
                enableDisableReceiptHeadersButtons(true);
            },
            save: function (e) {
                var updateButton = $(e.container).find('.k-grid-update');
                if (!updateButton.hasClass('k-state-disabled')) {
                    updateButton.addClass('k-state-disabled');
                }
                else {
                    e.preventDefault();
                }
            }, destroy: function () {
                enableDisableReceiptHeadersButtons(false);
            }
        });
    }

    function getNextReceiptNumber() {
        return Number.MAX_SAFE_INTEGER || 9007199254740991;
    }

    function departmentsDropDownEditor(container, options) {
        $('<input required data-text-field="text" data-value-field="value" data-bind="value:' + options.field + '"/>')
            .appendTo(container)
            .kendoDropDownList({
                //autoBind: false,
                //optionLabel: "Select Department",
                dataTextField: "text",
                dataValueField: "value",
                filter: "contains",
                dataSource: departmentDataSource
            });
    }

    function enableDisableReceiptHeadersButtons(isEnable) {
        if (!isEnable) {
            $('.k-grid-PrintReceipt').addClass("k-state-disabled").unbind("click");
            $('.k-grid-PostCheck').addClass("k-state-disabled").unbind("click");
        } else {
            $(".k-grid-PrintReceipt").removeClass("k-state-disabled").unbind("click").bind("click", function () {
                var recordUid = currentGrid.tbody.find(".k-state-selected").data('uid');
                var receipt = headersDataSources.getByUid(recordUid);
                if (receipt) {
                    $("#receiptHeaderId").val(receipt.ReceiptHeaderID);
                    $("#exportReceiptPDF").submit();
                }
            });

            $(".k-grid-PostCheck").removeClass("k-state-disabled").unbind("click").bind("click", function () {
                var recordUid = currentGrid.tbody.find(".k-state-selected").data('uid');
                var receipt = headersDataSources.getByUid(recordUid);
                if (receipt) {
                    $.post('@Url.Action("CheckReciptHeaderTotals")?receiptHeaderId=' + receipt.ReceiptHeaderID,
                        {
                            ReceiptHeaderID: receipt.ReceiptHeaderID,
                        })
                        .done(function (data) {
                            if (data) {
                                if (data.Result) {
                                    notify.showSuccess(data.Message);
                                } else {
                                    notify.showError(data.Message);
                                }
                            }
                        });
                }
            });
        }
    }

    function receiptHeaderDetailInit(e) {
        var detailRow = e.detailRow;

        detailRow.find(".tabstrip").kendoTabStrip({
            animation: {
                open: { effects: "fadeIn" }
            }
        });

        $.getJSON('@Url.Action("GetTemplatesList", "ReceiptHeaders")?includeAccounts=false', function (data) {
            templatesList = data;
            accountsList = $(data).map(function (i, item) {
                return { value: item.value, text: item.AccountNumber };
            });
            receiptBodyDiv = detailRow.find(".receiptsBodyGrid");
            initReceiptsBodyGrid(receiptBodyDiv, e);
        });

        $.getJSON('@Url.Action("GetPaymentMethods", "ReceiptHeaders")', function (data) {
            paymentMethods = data;
            initTendersGrid(detailRow.find(".tendersGrid"), e);
        });
    }

    function initTendersGrid(receiptTendersDiv, headersGridRef) {
        receiptsTendersDataSource = new kendo.data.DataSource({
            transport: {
                read: {
                    url: '@Url.Action("ReceiptsTenders_Read", "ReceiptHeaders")',
                    //contentType: "application/json; charset=utf-8",
                    dataType: "json"
                },
                update: {
                    url: '@Url.Action("ReceiptsTenders_Update", "ReceiptHeaders")',
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    type: "POST"
                },
                destroy: {
                    url: '@Url.Action("ReceiptsTenders_Destroy", "ReceiptHeaders")',
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    type: "POST"
                },
                create: {
                    url: '@Url.Action("ReceiptsTenders_Create", "ReceiptHeaders")',
                    dataType: "json",
                    contentType: "application/json; charset=utf-8",
                    type: "POST"
                },
                parameterMap: function (options, operation) {
                    if (operation !== "read" && options.models) {
                        if (operation == "create")
                            return (JSON.stringify({ receiptHeaderId: headersGridRef.data.ReceiptHeaderID, receiptTenders: options.models }));
                        return JSON.stringify({ receiptTenders: options.models });
                    }
                }
            },
            batch: true,
            pageSize: 10,
            filter: { field: "ReceiptHeaderID", operator: "eq", value: headersGridRef.data.ReceiptHeaderID },
            dataBound: function () {
            },
            serverPaging: false,
            aggregate: [
                { field: "Amount", aggregate: "sum" },
            ],
            schema: {
                data: "Data",
                total: "Total",
                model: {
                    id: "TenderID",
                    fields: {
                        TenderID: { type: "number", editable: false, nullable: false, defaultValue: 0 },
                        ReceiptHeaderID: { type: "number", editable: false, nullable: false, defaultValue: headersGridRef.data.ReceiptHeaderID },
                        Description: { validation: { required: false }, type: "string" },
                        Amount: { validation: { required: true }, type: "number" },
                        PaymentMethodId: { validation: { required: true }, type: "number", nullable: false, defaultValue: 2 /*Check*/ }
                    }
                },
                errors: "Errors"
            },
            change: function (e) {

            },
            error: function (e) {
                if (e && e.errors) {
                    if (e.errors["_deleteKey"]) {
                        notify.showError(e.errors["_deleteKey"].errors[0]);
                    } else if (e.errors["_updateKey"]) {
                        notify.showError(e.errors["_updateKey"].errors[0]);
                    } else {
                        notify.showError('An error has been occurred, please contact system admin.');
                    }
                }
                this.cancelChanges();
            }
        });

        receiptTendersDiv.kendoGrid({
            dataSource: receiptsTendersDataSource,
            selectable: "row",
            resizable: true,
            scrollable: true,
            sortable: true,
            filterable: true,
            groupable: true,
            reorderable: true,
            columnMenu: true,
            navigatable: true,
            pageable: {
                refresh: true,
                input: true,
                numeric: false,
                pageSizes: [10, 20, 30, 50, 75, 100]
            },
            columns: [
                {
                    field: "PaymentMethodId",
                    title: "Payment Method",
                    values: paymentMethods,
                    width: 140
                },
                {
                    field: "Description",
                    title: "Description",
                    width: 140
                },
                {
                    field: "Amount",
                    title: "Amount",
                    editor: oldNumericBoxEditor,
                    format: "{0:n2}",
                    footerTemplate: "Total: #=kendo.toString(sum, 'C')#",
                    width: 69
                },
                { command: ["destroy"], title: "&nbsp;", width: "140px" }
            ],
            editable: true,
            toolbar: ["create", "save", "cancel"],
            change: function () {
                //selectedRows = this.select();
            },
            edit: function (e) {
                //var popupWindow = $(e.container.data('kendoWindow'));
                //e.container.data('kendoWindow').bind('activate', function (e) {
                //    $(popupWindow).attr('element').find('input:first').focus();
                //});
            },
            save: function (e) {
                if (!e.values.Amount)
                    return;
                var oldModel = e.model,
                    receiptsTenderTotal = 0,
                    currentDataSource = this.dataSource,
                    oldModelAmount = currentDataSource.get(oldModel.TenderID).Amount;

                $(currentDataSource.data())
                    .map(function (i, item) {
                        if (item.ReceiptHeaderID == e.model.ReceiptHeaderID)
                            if (!e.values.Amount || item.TenderID != e.model.TenderID)
                                receiptsTenderTotal += item.Amount;
                            else {
                                receiptsTenderTotal += e.values.Amount;
                            }
                    });
                var receiptHeaderTotal = headersDataSources.get(e.model.ReceiptHeaderID).ReceiptTotal;
                if (receiptsTenderTotal > receiptHeaderTotal) {
                    notify.confirm("Tenders total amount(" +
                        receiptsTenderTotal + ") is greater than receipt total(" +
                        receiptHeaderTotal + ")",
                        "Are you sure you want to continue?",
                        function (isConfirmed) {
                            if (!isConfirmed) {
                                currentDataSource.get(oldModel.TenderID).set("Amount", oldModelAmount);
                            }
                        });
                }
            }
        });
    }

    function initReceiptsBodyGrid(receiptBodyDiv, headersGridRef) {

        templatesDataSource = new kendo.data.DataSource({
            transport: {
                read: {
                    url: templatesReadUrl,
                    dataType: "json"
                }
            },
            serverPaging: false,
            schema: {
                data: "Data",
                total: "Total",
                model: {
                    id: "TemplateID",
                    fields: {
                        Description: { type: "string" },
                        TemplateID: { type: "number" }
                    }
                },
                errors: "Errors"
            },
            change: function (e) {

            },
            error: function (e) {
                this.cancelChanges();
            }
        });

        receiptsBodyDataSource = new kendo.data.DataSource({
            transport: {
                read: {
                    url: '@Url.Action("ReceiptsBody_Read", "ReceiptHeaders")',
                    //contentType: "application/json; charset=utf-8",
                    dataType: "json"
                },
                update: {
                    url: '@Url.Action("ReceiptsBody_Update", "ReceiptHeaders")',
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    type: "POST"
                },
                destroy: {
                    url: '@Url.Action("ReceiptsBody_Destroy", "ReceiptHeaders")',
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    type: "POST"
                },
                create: {
                    url: '@Url.Action("ReceiptsBody_Create", "ReceiptHeaders")',
                    dataType: "json",
                    contentType: "application/json; charset=utf-8",
                    type: "POST"
                },
                parameterMap: function (options, operation) {
                    if (operation !== "read" && options.models) {
                        if (operation == "create")
                            return (JSON.stringify({ receiptHeaderId: headersGridRef.data.ReceiptHeaderID, receiptBodies: options.models }));
                        return JSON.stringify({ receiptBodies: options.models });
                    }
                }
            },
            sort: [{ field: "AccountNumber", dir: "asc" }],
            batch: true,
            pageSize: 20,
            filter: { field: "ReceiptHeaderID", operator: "eq", value: headersGridRef.data.ReceiptHeaderID },
            dataBound: function () {
            },
            serverPaging: false,
            aggregate: [
                { field: "LineTotal", aggregate: "sum" },
            ],
            schema: {
                data: "Data",
                total: "Total",
                model: {
                    id: "ReceiptBodyID",
                    fields: {
                        ReceiptBodyID: { type: "number", editable: false, nullable: false, defaultValue: 0 },
                        ReceiptHeaderID: { type: "number", editable: false, nullable: false, defaultValue: headersGridRef.data.ReceiptHeaderID },
                        AccountNumber: { type: "string" },
                        LineTotal: { validation: { required: true }, type: "number", spinners: false },
                        AccountDescription: { validation: { required: true }, type: "string" },
                        TemplateOrder: { validation: { required: false }, type: "number" }
                    }
                },
                errors: "Errors"
            },
            change: function (e) {
            },
            error: function (e) {
                if (e && e.errors) {
                    if (e.errors["_deleteKey"]) {
                        notify.showError(e.errors["_deleteKey"].errors[0]);
                    } else if (e.errors["_updateKey"]) {
                        notify.showError(e.errors["_updateKey"].errors[0]);
                    } else {
                        notify.showError('An error has been occurred, please contact system admin.');
                    }
                }
                this.cancelChanges();
            }
        });

        receiptBodyDiv.kendoGrid({
            dataSource: receiptsBodyDataSource,
            navigatable: true,
            selectable: "cell",
            resizable: true,
            scrollable: true,
            sortable: true,
            filterable: true,
            groupable: true,
            reorderable: true,
            columnMenu: true,
            pageable: {
                refresh: true,
                input: true,
                numeric: false,
                pageSizes: [10, 20, 30, 50, 75, 100]
            },
            columns: [
                {
                    field: "AccountNumber",
                    title: "Account Number",
                    editor: templateAutocompleteEditor,
                    width: 100
                },
                {
                    field: "LineTotal",
                    title: "Line Total",
                    editor: oldNumericBoxEditor,
                    format: "{0:n2}",
                    headerAttributes: { style: "text-align:right" },
                    attributes: { class: "text-right editable-cell highlight-cell-text" },
                    footerTemplate: "Total: #=kendo.toString(sum, 'C')#",
                    width: 40
                },
                {
                    field: "AccountDescription",
                    title: "Template",
                    editor: templateAutocompleteEditor,
                    width: 100
                },
                {
                    command: [{
                        name: "remove",
                        click: function (e) {
                            var tr = $(e.target).closest("tr");
                            this.removeRow(tr);
                            this.saveChanges();
                        },
                        text: "Delete",
                        className: "btn-destroy"
                    }], title: "&nbsp;", width: "60px"
                }

            ],
            editable: true,
            toolbar: ["create", "save", "cancel"],
            dataBound: function () {
                //highlight total cell if selected, so client would be able to overwrite values
                $(this.tbody.find(".highlight-cell-text")).on('focus', '.k-input', function () {
                    var input = $(this);
                    setTimeout(function () { input.select(); });
                });
            },
            change: function () {
                //selectedRows = this.select();
            },
            edit: function (e) {

            },
            save: function (e) {
                if (!e.values.LineTotal)
                    return;
                var oldModel = e.model,
                    receiptsLineTotal = 0,
                    currentDataSource = this.dataSource,
                    oldModelAmount = currentDataSource.get(oldModel.ReceiptBodyID).LineTotal;
                $(currentDataSource.data())
                    .map(function (i, item) {
                        if (item.ReceiptHeaderID == e.model.ReceiptHeaderID)
                            if (!e.values.LineTotal || item.ReceiptBodyID != e.model.ReceiptBodyID)
                                receiptsLineTotal += item.LineTotal;
                            else {
                                receiptsLineTotal += e.values.LineTotal;
                            }
                    });
                var receiptHeaderTotal = headersDataSources.get(e.model.ReceiptHeaderID).ReceiptTotal;
                if (receiptsLineTotal > receiptHeaderTotal) {
                    notify.confirm("Receipt body total line sum(" +
                        receiptsLineTotal + ") is greater than receipt total(" +
                        receiptHeaderTotal + ")",
                        "Are you sure you want to continue?",
                        function (isConfirmed) {
                            if (!isConfirmed) {
                                currentDataSource.get(oldModel.ReceiptBodyID).set("LineTotal", oldModelAmount);
                            }
                        });
                }
            }
        })
            .find("table").on("keydown", onBodyGridKeydown);
    }

    function templateAutocompleteEditor(container, options) {
        var model = options.model;
        var parentContainer = container.parent();
        $('<input data-bind="value:' + options.field + '"/>')
            .appendTo(container)
            .kendoAutoComplete({
                placeholder: "Enter value ...",
                //suggest: true,
                dataTextField: 'Description',
                filter: "contains",
                minLength: 2,
                dataSource: {
                    type: "json",
                    serverFiltering: true,
                    serverPaging: true,
                    transport: {
                        read: {
                            url: '@Url.Action("GetGCAccountDetails", "Departments")',
                            //type: "POST",
                            dataType: "json",
                            data: function (param) {
                                var searchParam = param.filter.filters[0];
                                var field = options.field === "AccountNumber" ? "Account" : "Description";
                                //return searchParam;
                                return { value: searchParam.value, operator: "contains", field: field, ignoreCase: true };
                            }
                        }
                    }
                },
                select: function (e) {
                    autoCompleteOnSelect(this, parentContainer, options.field, model, e);
                }
            });
    }

    function autoCompleteOnSelect(that, parentContainer, fieldName, model, e) {
        var dataItem = that.dataItem(e.item.index());
        var accountNumberElem = parentContainer.find('[data-bind="value:AccountNumber"]'),
            descElem = parentContainer.find('[data-bind="value:AccountDescription"]');

        var acctNumber = dataItem.Fund +
                '.' +
                dataItem.Dept +
                '.' +
                dataItem.Program +
                '.' +
                dataItem.Project +
                '.' +
                dataItem.BaseElementObjectDetail;
        var description = dataItem.Description.split(']')[1].trim();

        accountNumberElem.val(acctNumber);
        model.set("AccountNumber", acctNumber);
        descElem.val(description);
        model.set("AccountDescription", description);
        model.set("TemplateID", dataItem.TemplateID);
        model.set("AccountDataSource", dataItem.DataSource);
        model.set("IsRemote", true);
        e.preventDefault();
    }


    //var ignoreKey = false;
    //var handler = function (e) {
    //    if (ignoreKey) {
    //        e.preventDefault();
    //        return;
    //    }
    //    if (e.keyCode == 38 || e.keyCode == 40) {
    //        var pos = this.selectionStart;
    //        this.value = (e.keyCode == 38 ? 1 : -1) + parseInt(this.value, 10);
    //        this.selectionStart = pos; this.selectionEnd = pos;

    //        ignoreKey = true; setTimeout(function () { ignoreKey = false }, 1);
    //        e.preventDefault();
    //    }
    //};
    //input.addEventListener('keydown', handler, false);
    //input.addEventListener('keypress', handler, false);


    function onBodyGridKeydown(e) {
        if (e.keyCode === kendo.keys.TAB) {
            var grid = $(this).closest("[data-role=grid]").data("kendoGrid");
            var current = grid.current();
            if (!current.hasClass("editable-cell")) {
                //search the next row
                var row = current.parent();
                var cell;

                if (!e.shiftKey)
                    cell = row.next().children(".editable-cell:first");
                else
                    cell = row.prev().children(".editable-cell:first");
                grid.current(cell);
                grid.editCell(cell[0]);
                setTimeout(function () { $(cell[0]).find(':input.k-input:first').select(); }, 100);
            }
        }
    };

    function oldNumericBoxEditor(container, options) {
        $('<input data-bind="value:' + options.field + '"/>')
            .appendTo(container)
            .kendoNumericTextBox({
                spinners: false
            }).off("keydown");
    }

    function templateDropDownEditor(container, options) {
        var rowContainer = container, fieldName = options.field;
        $('<input required data-text-field="text" data-value-field="value" data-bind="value:' + fieldName + '"/>')
            .appendTo(container)
            .kendoDropDownList({
                dataTextField: "text",
                dataValueField: "value",
                filter: "contains",
                height: 400,
                dataSource: {
                    transport: {
                        dataType: "json",
                        read: "@Url.Action("GetTemplatesList", "ReceiptHeaders")"
                    },
                    batch: false,
                    pageSize: 1000,
                    group: { field: "DepartmentName" },
                    schema: {
                        model: {
                            id: "value",
                            fields: {
                                value: { editable: false, nullable: false },
                                text: { validation: { required: true } },
                                DepartmentName: { validation: { required: true } },
                            }
                        }
                    }
                },
                select: function (e) {
                    debugger;
                    if (fieldName == 'TemplateID') {
                        var accountNumber = e.item.text().split("|")[1].trim();
                        $(rowContainer).parents('tr:first').find('td:first').text(accountNumber);
                    } else {
                        var grid = receiptBodyDiv.data("kendoGrid");
                        var model = grid.dataItem($(rowContainer).parents('tr:first'));
                        model.set("TemplateID", e.sender.dataItem(e.item).value);
                    }
                }
            });
    }

    function isBlank(str) {
        return (!str || /^\s*$/.test(str));
    }

    function lessThanOrEqual(val, charLength) {
        return val.length <= charLength
    }

</script>

@using (Html.BeginForm("DownloadReceipt", "ReceiptHeaders", FormMethod.Post, new { id = "exportReceiptPDF" }))
{
    <input type="hidden" id="receiptHeaderId" name="receiptHeaderId" />
}