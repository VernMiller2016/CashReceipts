@model dynamic

@{
    ViewBag.Title = "System Reports";
}
@section styles{
    <link href="~/Content/KendoBoxStyles.css" rel="stylesheet" />
    <link href="~/Content/DaySummaryReport.css" rel="stylesheet" />
    <style>
        .locked_Yes {
            display: none;
        }

        .margin_10 {
            margin-left: 10px !important;
        }
        html {
            font-size: 10px;
            font-family: Arial, Helvetica, sans-serif;
        }
    </style>
}

<div id="example">
    <div class="box wide hidden-on-narrow" style="margin-top: 0;margin-bottom: 0;padding-bottom: 0;">
        <div class="box-col">
        </div>
        <div class="box-col">
        </div>
        <div class="box-col">
            <h4>Select Page size</h4>
            <select id="paper" style="width: 100px;">
                <option value="size-a4" selected>A4</option>
                <option value="size-letter">Letter</option>
                <option value="size-executive">Executive</option>
            </select>
        </div>
        <div class="box-col" style="padding-right: 10px;">
            <h4>From</h4>
            <input id="startdatepicker" style="width: 100%" />
        </div>
        <div class="box-col" style="padding-right: 10px;">
            <h4>To</h4>
            <input id="enddatepicker" style="width: 100%" />
        </div>
        <div class="box-col" style="padding-right: 10px;">
            <h4>Select Clerk</h4>
            <input id="clerk" style="width: 170px" />
        </div>
        <div class="box-col">
            <h4>Search</h4>
            <button class="search-btn k-button" onclick="refreshGrids()">Search</button>
        </div>
        <div class="box-col">
            <img src="/Images/ajax-loader.gif" class="summaryLoading" style="display: none; padding-top: 40px">
        </div>
    </div>
    <div class="box wide hidden-on-narrow" style="margin-top: 5px;margin-bottom: 10px;">
        @if (ViewBag.HasExportAccess == true)
        {
            <div class="box-col">
                <h4>Items Per Page</h4>
                <select id="itemsPerPage" onchange="refreshGrids()">
                    <option value="15">14</option>
                    <option value="16" selected="selected">15</option>
                    <option value="17">16</option>
                    <option value="18">17</option>
                    <option value="19">18</option>
                    <option value="20">19</option>
                    <option value="21">20</option>
                    <option value="22">21</option>
                    <option value="23">22</option>
                    <option value="24">23</option>
                    <option value="25">24</option>
                    <option value="26">25</option>
                    <option value="27">26</option>
                    <option value="28">27</option>
                    <option value="29">28</option>
                    <option value="28">29</option>
                    <option value="29">30</option>
                    <option value="30">31</option>
                    <option value="31">32</option>
                    <option value="32">33</option>
                    <option value="33">34</option>
                    <option value="34">35</option>
                    <option value="35">36</option>
                    <option value="36">37</option>
                    <option value="37">38</option>
                    <option value="38">39</option>
                    <option value="39">40</option>
                    <option value="40">41</option>
                    <option value="41">42</option>
                    <option value="42">43</option>
                    <option value="43">44</option>
                    <option value="44">45</option>
                    <option value="45">46</option>
                    <option value="46">47</option>
                    <option value="47">48</option>
                    <option value="48">49</option>
                    <option value="49">50</option>
                </select>
            </div>
            <div class="box-col">
                <h4>Font Size</h4>
                <select id="fontSize">
                    <option value="6">xx-small</option>
                    <option value="8">x-small</option>
                    <option value="10" selected="selected">small</option>
                    <option value="12">medium</option>
                    <option value="14">large</option>
                    <option value="16">x-large</option>
                </select>
            </div>
            <div class="box-col">
                <h4>Get PDF</h4>
                <button class="export-pdf k-button" onclick="getPDF('.pdf-body')">Export</button>
                <img src="/Images/ajax-loader.gif" class="pdfExportLoading" style="display: none;">
            </div>
            <div class="box-col">
                <h4>Print Report</h4>
                <button class="export-pdf k-button" onclick="printReport('.pdf-page')">Print</button>
            </div>
        }
        @if (ViewBag.HasLockReceiptsAccess == true)
        {
            <div class="box-col">
                <h4>Lock Receipts</h4>
                <button class="lock-receipts k-button">Lock Selected Receipts</button>
            </div>
        }
    </div>

    <div class="page-container hidden-on-narrow">
        <div class="pdf-page size-a4" style="width:12in;">
            @*<div class="pdf-header">
                    <span class="company-logo">
                        <img src="~/Images/company_logo.jpg" /> Cash Receipting System
                    </span>
                    <span class="invoice-number"></span>
                </div>*@
            <div class="pdf-footer" style="bottom:-2.5in;">
                <p>
                    Cash Receipting System<br />
                </p>
            </div>

            <div class="from" style="display: none">
            </div>
            <div class="pdf-body">
                <h3>Summary report of the day <span id="clerkName"></span></h3>
                <p>
                    Summary Date From <span class="selectedStartDate"></span> to <span class="selectedEndDate"></span>
                </p>
                <div id="grid" style="font-size: x-small"></div>
                <br class="page-break" />
                <h4>Tenders</h4>
                <div id="tendersGrid"></div>
                <p class="signature">
                    Signature: ________________ <br /><br />
                    Generation Date: <span class="todayDate"></span>
                </p>
            </div>
        </div>
    </div>

    <div class="responsive-message"></div>

    <style>
        /*
                Use the DejaVu Sans font for display and embedding in the PDF file.
                The standard PDF fonts have no support for Unicode characters.
            */
        .pdf-page {
            font-family: "DejaVu Sans", "Arial", sans-serif;
        }
    </style>

    <script>
        // Import DejaVu Sans font for embedding

        // NOTE: Only required if the Kendo UI stylesheets are loaded
        // from a different origin, e.g. cdn.kendostatic.com
        kendo.pdf.defineFont({
            "DejaVu Sans": "~/fonts/DejaVu/DejaVuSans.ttf",
            "DejaVu Sans|Bold": "~/fonts/DejaVu/DejaVuSans-Bold.ttf",
            "DejaVu Sans|Bold|Italic": "~/fonts/DejaVu/DejaVuSans-Oblique.ttf",
            "DejaVu Sans|Italic": "~/fonts/DejaVu/DejaVuSans-Oblique.ttf"
        });
    </script>

    <!-- Load Pako ZLIB library to enable PDF compression -->
    <script src="~/Scripts/KenodUI2017.1.223/js/pako_deflate.min.js"></script>
    <script>
        var summaryGrid, tendersGrid, itemsPerPage;

        function printReport() {
            //check this link
            //http://docs.telerik.com/kendo-ui/controls/data-management/grid/print-export

            //var win = window.open('', '', 'width=800, height=500'),
            //doc = win.document.open();
            //doc.write($('.pdf-page').html());
            //doc.close();
            //win.print();
            var printContents = $('.pdf-page').html();
            var originalContents = document.body.innerHTML;
            document.body.innerHTML = printContents;
            window.print();
            //document.body.innerHTML = originalContents;
            location.reload();
        }

        function getPDF(selector) {
            var elem = $(selector);
            $('.pdfExportLoading').show();
            elem.css('font-size', $('#fontSize').val() + "px");
            itemsPerPage = parseInt($('#itemsPerPage').val());
            var grid = $("#grid").data("kendoGrid");
            grid.hideColumn(0);
            grid.hideColumn(1);
            grid.hideColumn(4);
            grid.hideColumn(6);
            grid.hideColumn(7);
            grid.hideColumn(8);
            $('#grid .k-grid-footer').css('padding-right', '0');

            kendo.drawing.drawDOM(elem, {
                forcePageBreak: ".page-break",
                paperSize: "A4",
                margin: { left: "1pt", top: "1pt", right: "1pt", bottom: "1pt" },
                multiPage: true
            }).then(function (group) {
                    // Render the result as a PDF file
                    return kendo.drawing.exportPDF(group);
                })
                .done(function (data) {
                    // Save the PDF file
                    kendo.saveAs({
                        dataURI: data,
                        fileName: "Invoice.pdf"
                    });
                    grid.showColumn(0);
                    grid.showColumn(1);
                    grid.showColumn(4);
                    grid.showColumn(6);
                    grid.showColumn(7);
                    grid.showColumn(8);

                    if(@(((bool)ViewBag.HasLockReceiptsAccess).ToString().ToLower()))
                        grid.showColumn(4);
                    $('#grid .k-grid-footer').css('padding-right', '17px');
                    elem.css('font-size', "10px");
                    $('.pdfExportLoading').hide();
                });
                //.then(function (group) {
                //    //group.options.set("pdf", {
                //    //    //paperSize: "A4",
                //    //    //multiPage: true,
                //    //    margin: {
                //    //        left: "5px",
                //    //        top: "5px",
                //    //        right: "5px",
                //    //        bottom: "5px"
                //    //    }
                //    //});
                //    //group.options.set("pdf.margin", "5px");
                //    group.options.set("pdf.margin", "1pt");
                //    group.options.set("pdf.padding", "1pt");
                //    kendo.drawing.pdf.saveAs(group, "Invoice.pdf");
                //});
        }

        function getSelectedClerk() {
            return $("#clerk").data("kendoDropDownList").value();
        }

        function getSelectedStartDate() {
            return kendo.toString($("#startdatepicker").data("kendoDatePicker").value(), "d");
        }

        function getSelectedEndDate() {
            return kendo.toString($("#enddatepicker").data("kendoDatePicker").value(), "d");
        }

        function refreshGrids() {
            var grid = summaryGrid.data("kendoGrid");
            grid.dataSource.read();
            grid.refresh();

            var tendersDataGrid = tendersGrid.data("kendoGrid");
            tendersDataGrid.dataSource.read();
            tendersDataGrid.refresh();
        }

        $(document)
            .ready(function() {
                $('.todayDate').text(kendo.toString(new Date(), "d"));
                $('#clerk')
                    .kendoDropDownList({
                        dataTextField: "ClerkName",
                        dataValueField: "Id",
                        optionLabel: "Select Clerk...",
                        dataSource: {
                            transport: {
                                read: {
                                    dataType: "json",
                                    url: '@Url.Action("GetAllClerks")'
                                }
                            }
                        },
                        change: function (e) {
                            //var value = this.value();
                            $("#clerkName").html("(" + this.text() + ")");
                            refreshGrids();
                        }
                    });

                $("#startdatepicker")
                    .kendoDatePicker({
                        format: "MM/dd/yyyy",
                        value: new Date(),
                        change: function () {
                            var value = this.value();
                            $('.selectedStartDate').text(kendo.toString(value, "d"));
                            //refreshGrids();
                        }
                    });

                $("#enddatepicker")
                    .kendoDatePicker({
                        format: "MM/dd/yyyy",
                        value: new Date(),
                        change: function () {
                            var value = this.value();
                            $('.selectedEndDate').text(kendo.toString(value, "d"));
                            //refreshGrids();
                        }
                    });

                var aggregate = [
                    { field: "Total", aggregate: "sum" }
                ];
                var columns = [
                    {
                        width: 40,
                        template: "<input type='checkbox' class='checkbox margin_10 locked_#= Locked #' data-locked='#= Locked #'/>",
                        //"#if(!Locked){# <input type='checkbox' class='checkbox' /> #}#"
                        headerTemplate: "<input type='checkbox' id='checkAll' class='margin_10'/>"
                    },
                    { field:  "Date", title: "Date", width: 90},
                    { field: "ReceiptNumber", title: "Receipt#", width: 90 },
                    { field: "DepartmentName", title: "Department Name", width: 200 },
                    { field: "Locked", title: "Is Locked", width: 90, hidden: @((!(bool)ViewBag.HasLockReceiptsAccess).ToString().ToLower())},
                    {
                        field: "Total",
                        title: "Total",
                        width: 100,
                        aggregates: ["sum"],
                        footerTemplate: "#=kendo.toString(sum, 'C')#",
                        format: "{0:n2}",
                        //headerAttributes: { style: "text-align:right" },
                        //attributes: { class: "text-right" }
                    },
                    {
                        field: "VirtualTotal",
                        title: "Not Included Total",
                        width: 100,
                        format: "{0:n2}",
                    },
                    { field: "Void", title: "Void", width: "35px" },
                    { field: "InTotal", title: "In Total ?", width: "55px"}
                ];
                summaryGrid = $("#grid")
                    .kendoGrid({
                        editable: false,
                        sortable: true,
                        resizable: true,
                        reorderable: true,
                        dataSource: new kendo.data.DataSource({
                            transport: {
                                read: {
                                    url: '@Url.Action("DepartmentsSummary_Read", "SysReports")',
                                    dataType: "json",
                                },
                                parameterMap: function (options, operation) {
                                    if (operation === "read") {
                                        return { startDate: getSelectedStartDate(), endDate: getSelectedEndDate(), clerkId: getSelectedClerk() };
                                    }
                                }
                            },
                            batch: true,
                            pageSize: 1000,
                            serverPaging: false,
                            schema: {
                                data: "Data",
                                total: "Total",
                                model: {
                                    id: "ReceiptHeaderID",
                                    fields: {
                                        ReceiptHeaderID: {
                                            type: "number"
                                        },
                                        DepartmentId: {
                                            type: "number"
                                        },
                                        ReceiptNumber: {
                                            type: "string"
                                        },
                                        DepartmentName: {
                                            type: "string"
                                        },
                                        Total: { type: "number" },
                                        Locked: { type:"string" }
                                    }
                                },
                                errors: "Errors"
                            },
                            aggregate: aggregate,
                            error: function (ee) {
                                if (ee.errors && ee.errors["_readKey"]) {
                                    notify.showError(ee.errors["_readKey"].errors[0]);
                                } else {
                                    notify.showError('An error has been occurred, please contact system admin.');
                                }
                                this.cancelChanges();
                            },
                            requestStart: function (e) {
                                $('.summaryLoading').show();
                            },
                            requestEnd: function (e) {
                                $('.summaryLoading').hide();
                            }
                        }),
                        columns: columns,
                        dataBound: function (e) {
                            itemsPerPage = parseInt($('#itemsPerPage').val());
                            $('.selectedStartDate').text(getSelectedStartDate());
                            $('.selectedEndDate').text(getSelectedEndDate());
                            $('#checkAll').prop("checked", false);
                            checkedIds = {};
                            var items = e.sender.items();
                            items.each(function (index) {
                                if (index == itemsPerPage - 4)
                                    this.className += " page-break";
                                else if ((index - (itemsPerPage - 4)) % itemsPerPage == (itemsPerPage - 1)) {
                                    this.className += " page-break";
                                }
                            })
                        }
                    });

                var tendersColumns = [
                    { field: "PaymentMethod", title: "Payment Method", width: 150 },
                    {
                        field: "TotalAmount",
                        title: "Total",
                        width: 150,
                        aggregates: ["sum"],
                        footerTemplate: "#=kendo.toString(sum, 'C')#",
                        format: "{0:n2}",
                        headerAttributes: { style: "text-align:right" },
                        attributes: { class: "text-right" }
                    }
                ];
                tendersGrid = $("#tendersGrid")
                    .kendoGrid({
                        editable: false,
                        sortable: true,
                        resizable: true,
                        reorderable: true,
                        dataSource: new kendo.data.DataSource({
                            transport: {
                                read: {
                                    url: '@Url.Action("TendersSummary_Read", "SysReports")',
                                    dataType: "json",
                                },
                                parameterMap: function (options, operation) {
                                    if (operation === "read") {
                                        return { startDate: getSelectedStartDate(), endDate: getSelectedEndDate(), clerkId: getSelectedClerk() };
                                    }
                                }
                            },
                            batch: true,
                            pageSize: 10,
                            serverPaging: false,
                            schema: {
                                data: "Data",
                                total: "Total",
                                model: {
                                    id: "PaymentMethodId",
                                    fields: {
                                        PaymentMethodId: {
                                            type: "number"
                                        },
                                        PaymentMethod: { type: "string" },
                                        TotalAmount: { type: "number" }
                                    }
                                },
                                errors: "Errors"
                            },
                            aggregate: [{ field: "TotalAmount", aggregate: "sum" }],
                            error: function (ee) {
                                if (ee.errors && ee.errors["_readKey"]) {
                                    notify.showError(ee.errors["_readKey"].errors[0]);
                                } else {
                                    notify.showError('An error has been occurred, please contact system admin.');
                                }
                                this.cancelChanges();
                            },
                            requestStart: function (e) {
                            },
                            requestEnd: function (e) {
                            }
                        }),
                        columns: tendersColumns,
                        dataBound: function (e) {
                            var items = e.sender.items();
                            items.each(function (index) {
                                if (index % itemsPerPage == (itemsPerPage - 1)) {
                                    this.className += " page-break";
                                }
                            })
                        }
                    });

                $("#paper")
                    .kendoDropDownList({
                        change: function () {
                            $(".pdf-page")
                                .removeClass("size-a4")
                                .removeClass("size-letter")
                                .removeClass("size-executive")
                                .addClass(this.value());
                        }
                    });

                var grid = summaryGrid.data("kendoGrid");
                //bind click event to the checkbox
                grid.table.on("click", ".checkbox", selectRow);

                $(".lock-receipts").bind("click",
                    function() {
                        var checked = [];
                        for (var i in checkedIds) {
                            if (checkedIds[i]) {
                                checked.push(i);
                            }
                        }
                        if (checked.length)
                            notify.confirm('Lock Receipts',
                                'Are you sure you want to lock all of the selected receipts?',
                                function() {
                                    lockReceipts(checked);
                                });
                        else {
                            notify.showError('Please select at least one receipt to lock.');
                        }
                    });

                $('#checkAll').bind("click",
                    function () {
                        var checkBoxes = $("#grid tbody input:checkbox[data-locked=No]");
                        if (this.checked)
                            checkBoxes.prop("checked", true);
                        else checkBoxes.prop("checked", false);
                        checkBoxes.each(function (i, item) {
                            selectDataRow(item);
                        });
                        //selectDataRow()
                    });
            });

        var checkedIds = {};

        //on click of the checkbox:
        function selectRow() {
            selectDataRow(this);
        }
        function selectDataRow(elem) {
            var checked = elem.checked,
                row = $(elem).closest("tr"),
                grid = $("#grid").data("kendoGrid"),
                dataItem = grid.dataItem(row);

            checkedIds[dataItem.id] = checked;
            if (checked) {
                //-select the row
                row.addClass("k-state-selected");
            } else {
                //-remove selection
                row.removeClass("k-state-selected");
            }
        }

        function lockReceipts(receiptsIds) {
            $.post('@Url.Action("LockReceipts", "ReceiptHeaders")',
                    {
                        ReceiptsIds: receiptsIds
                    })
                .done(function (data) {
                    if (data) {
                        if (data.Result) {
                            checkedIds = {};
                            notify.showSuccess(data.Message,
                                function() {
                                    refreshGrids();
                                });
                        } else {
                            notify.showError(data.Message);
                        }
                    }
                });
    }
    </script>
</div>

@Html.Partial("_HighlightMenu", "Reports")
