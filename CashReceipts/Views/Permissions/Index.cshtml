
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<link rel="stylesheet" href="~/Scripts/KenodUI2017.1.223/styles/kendo.bootstrap.mobile.min.css" />

<style type="text/css">
    /*#treeview .k-sprite {
            background-image: url("~/Scripts/KendoUI2016.2.504/styles/Bootstrap/sprite.png");
        }*/

    .rootfolder {
        background-position: 0 0;
    }

    .folder {
        background-position: 0 -16px;
    }

    .pdf {
        background-position: 0 -32px;
    }

    .html {
        background-position: 0 -48px;
    }

    .image {
        background-position: 0 -64px;
    }
</style>

<div id="example">
    <div class="demo-section k-content">
        <div>
            <div class="form-group">
                <label class="control-label col-md-2">Select Role</label>
                <div class="col-md-10">
                    @Html.DropDownList("RoleId", (SelectList)ViewBag.Roles, "-- Select Role --", new { @class = "form-control", onchange = "UpdateTree()" })
                </div>
            </div>
            <div id="treeview" style="overflow:hidden;padding:10px;"></div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="button" value="Save" onclick="SaveRoleFeatures()" class="btn btn-default" />
                <input type="hidden" id="CheckedNodes" />
            </div>
        </div>
        <div id="SuccessMessage" style="color:green;display:none">
            <p>Permissions Saved Sucessfully</p>
        </div>
        <div id="ErrorMessage" style="color:red;display:none">
            <p>Something went wrong</p>
        </div>
        <div id="NoSelectErrorMessage" style="color:red;display:none">
            <p>No features Selected</p>
        </div>
        <div id="NoRoleErrorMessage" style="color:red;display:none">
            <p>No Roles Selected</p>
        </div>
    </div>

    <script>
        var selectedRoleId = '', dataSource, screensData = [];
        $(document)
            .ready(function () {
                dataSource = new kendo.data.HierarchicalDataSource({
                    data: screensData,
                    schema: {
                        model: {
                            id: "id",
                            hasChildren: "hasFeatures",
                            children: "items"
                        }
                    }
                });

                $("#treeview")
                    .kendoTreeView({
                        dataSource: dataSource,
                        //loadOnDemand: false,
                        dataTextField: "text",
                        dataValueField: "id",
                        checkboxes: {
                            checkChildren: true
                        },
                        check: onCheck,
                        dataBound: function (e) {
                            //console.log("DataBound", e.node);
                            //$('.k-state-selected').parent().find('input:checkbox').prop('checked', true);
                        }
                    });

                getRolesPermissions();

            });

        function getRolesPermissions() {
            $.ajax({
                type: "GET",
                url: '@Url.Action("GetScreens")?roleId=' + selectedRoleId,
                dataType: "json",
                success: function (data) {
                    var treeView = $("#treeview").data("kendoTreeView");
                    screensData = data.Screens;
                    treeView.dataSource.data(screensData);
                    $("#CheckedNodes").val(data.ScreensValue);
                    //treeView.refresh();
                    //treeView.dataSource.refresh();
                }
            });
        }

        function SaveRoleFeatures() {
            var nodeIds = $("#CheckedNodes").val();

            var roleId = $("[name=RoleId]").val();
            if (roleId == "" || roleId == null) {
                $("#NoRoleErrorMessage").show();
            }
            else if (nodeIds == "") {
                $("#NoSelectErrorMessage").show();
            }
            else {
                $("#NoSelectErrorMessage").hide();
                $("#NoRoleErrorMessage").hide();

                var data = JSON.stringify({ 'nodeIds': nodeIds, 'roleId': roleId });

                $.ajax({
                    type: "POST",
                    url: "/Permissions/SavePermissions",
                    data: data,
                    dataType: "json",
                    contentType: "application/json; charset=utf-8",
                    success: function (data) {
                        debugger;
                        if (data == true) {
                            $("#SuccessMessage").show();
                            $("#ErrorMessage").hide();
                        }
                        else {
                            $("#SuccessMessage").hide();
                            $("#ErrorMessage").show();
                        }
                    },
                });
            }
        }

        // function that gathers IDs of checked nodes
        function checkedNodeIds(nodes, checkedNodes) {
            for (var i = 0; i < nodes.length; i++) {
                if (nodes[i].checked) {
                    checkedNodes.push(nodes[i].id);
                }

                if (nodes[i].hasChildren) {
                    checkedNodeIds(nodes[i].children.view(), checkedNodes);
                }
            }
        }

        // show checked node IDs on datasource change
        function onCheck() {
            var checkedNodes = [],
                treeView = $("#treeview").data("kendoTreeView"),
                message;

            checkedNodeIds(treeView.dataSource.view(), checkedNodes);

            if (checkedNodes.length > 0) {
                message = checkedNodes.join(",");
            } else {
                message = "";
            }

            $("#CheckedNodes").val(message);
        }

        function UpdateTree() {
            var roleId = $("[name=RoleId]").val();
            selectedRoleId = roleId;
            getRolesPermissions();
        }
    </script>

</div>
@Html.Partial("_HighlightMenu", 0)

